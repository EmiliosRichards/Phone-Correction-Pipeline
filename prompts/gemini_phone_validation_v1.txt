You will be provided with a list of candidate phone numbers. Each candidate includes the number itself, the source URL of the webpage where it was found, and a text snippet from that page showing the context around the number.

Your task is to analyze each candidate and its context to:
1. Determine the specific 'type' of the phone number (e.g., 'Main Line', 'Sales', 'Support', 'Fax', 'Mobile', 'Direct Dial', 'Customer Service', 'Headquarters', 'Unknown').
2. Assign a 'classification' to the phone number based on its quality and relevance:
   - 'Primary': The most prominent, official, and general contact number for the company or main entity (e.g., mainline, headquarters). This is the top-quality contact.
   - 'Secondary': Other important and useful business contact numbers (e.g., direct lines for key departments like Sales, main numbers for distinct branches or international offices). These are also good quality contacts.
   - 'Support': Dedicated customer support, technical help, or service hotlines. A valid contact, but its utility for general business outreach might be lower if 'Primary' or 'Secondary' numbers exist.
   - 'Low Relevance': Numbers verifiably business-related but not suitable for primary contact or general inquiry (e.g., Fax numbers, highly specialized internal lines not meant for public contact, or numbers with very limited utility if better alternatives are abundant).
   - 'Non-Business': Numbers clearly personal, product identifiers, reference codes, or any number not serving as a business contact point. This includes numbers too ambiguous to be useful or appearing entirely irrelevant.

Consider the source URL (e.g., a 'Contact Us' page is more likely to contain 'Best Match' numbers) and the text snippet for clues. Only extract numbers relevant to the primary business operations for the following countries: Germany, Switzerland, Austria.

Input will be a list of items, each formatted as:
{
  "candidate_number": "E.164_formatted_number_found_by_regex",
  "source_url": "URL_of_the_webpage_where_snippet_was_found",
  "snippet": "Text snippet surrounding the number..."
}

Please provide your output as a single JSON object. This object MUST contain a key named "extracted_numbers", which is a list.
EVERY item in the "extracted_numbers" list MUST be an object containing exactly three fields:
1. "number": The original E.164 formatted candidate_number.
2. "type": Your determined type for the number (e.g., 'Main Line', 'Support', 'Fax', 'Unknown').
3. "classification": Your assigned classification ('Primary', 'Secondary', 'Support', 'Low Relevance', 'Non-Business'). If unsure, default to 'Non-Business' for classification but always include the field.

Example of the expected output format:
```json
{
  "extracted_numbers": [
    {
      "number": "+49301234567",
      "type": "Main Line",
      "classification": "Primary"
    },
    {
      "number": "+49897654321",
      "type": "Sales Department",
      "classification": "Secondary"
    },
    {
      "number": "+49301234568",
      "type": "Fax",
      "classification": "Low Relevance"
    },
    {
      "number": "+41449876543",
      "type": "Support Hotline",
      "classification": "Support"
    },
    {
      "number": "0800111222",
      "type": "Customer Service",
      "classification": "Support"
    },
    {
      "number": "123456",
      "type": "Unknown",
      "classification": "Non-Business"
    }
  ]
}
```

Only include entries in "extracted_numbers" for candidates you have analyzed from the input list.

Candidate List:
[Insert JSON list of (candidate_number, source_url, snippet) objects here]