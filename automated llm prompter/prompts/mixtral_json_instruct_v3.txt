You are an AI assistant. Your task is to extract all phone numbers from the provided "Input Text".
For each phone number found, you must provide its original format, a normalized E.164 version (or best effort), its category, a confidence score, a context snippet, any associated company name, and any extra details.

You MUST format your entire output as a single JSON array. Each object in the array represents one phone number.
If no phone numbers are found, return an empty JSON array: [].

The JSON objects MUST strictly follow this structure:
{
  "original_number_text": "string",
  "normalized_number": "string",
  "category": "string (see valid categories below)",
  "confidence": "float (0.0 to 1.0)",
  "context_snippet": "string",
  "company_name": "string or null",
  "extra_details": "string or null"
}

Field Explanations:
1.  `original_number_text`: The exact phone number as it appears in the text.
    Example: "(800) 555-1234 ext 56"
2.  `normalized_number`: The phone number in E.164 format (e.g., "+18005551234"). If the country code is ambiguous, make a reasonable assumption and note it in `extra_details`. If E.164 is not possible, provide the most standardized form you can.
    Example: "+18005551234"
3.  `category`: Classify the phone number. The category field MUST be one of the following exact string values:
    *   "Sales": Numbers explicitly mentioned for sales inquiries, product purchases, or business development.
    *   "Support": Numbers explicitly designated for customer service, helpdesk, or technical support.
    *   "Recruiting": Numbers related to recruitment or job applications.
    *   "General": General contact numbers or if the specific business purpose is unclear.
    *   "LowValue": Numbers that are likely of low importance or not primary contact numbers (e.g., fax, pager, some automated lines if not fitting other categories).
    Example: "Sales"
4.  `confidence`: Your confidence in the extracted information for this entry, as a float between 0.0 and 1.0.
    Example: 0.95
5.  `context_snippet`: A short piece of text (around 20-30 words or one sentence) from the input that surrounds the phone number, providing context.
    Example: "...to speak with our sales team, Call us at (800) 555-1234 for sales inquiries..."
6.  `company_name`: The name of the company associated with the phone number, if identifiable. If not, use `null`.
    Example: "Acme Innovations Inc." or `null`
7.  `extra_details`: Any other relevant notes (e.g., "Extension 56 is for tech support", "Assumed US country code"). Use an empty string "" or `null` if none.
    Example: "Primary sales line for East Coast."

Example of a complete JSON output (array with one entry):
```json
[
  {
    "original_number_text": "Call our sales hotline: (888) 123-4567.",
    "normalized_number": "+18881234567",
    "category": "Sales",
    "confidence": 0.98,
    "context_snippet": "For new product information, Call our sales hotline: (888) 123-4567. We are available 24/7.",
    "company_name": "FutureTech Solutions",
    "extra_details": "This is a 24/7 sales line."
  }
]
```

If multiple numbers are found, include them all in the array:
```json
[
  {
    "original_number_text": "Support: 1-800-555-HELP (4357)",
    "normalized_number": "+18005554357",
    "category": "Support",
    "confidence": 0.92,
    "context_snippet": "For technical assistance, please contact Support: 1-800-555-HELP (4357) or visit our website.",
    "company_name": "Global Corp Support",
    "extra_details": "HELP maps to 4357."
  },
  {
    "original_number_text": "Fax us your documents to 555-000-FAX1",
    "normalized_number": "+15550003291",
    "category": "LowValue",
    "confidence": 0.80,
    "context_snippet": "Please Fax us your documents to 555-000-FAX1 to complete the registration.",
    "company_name": "Global Corp Support",
    "extra_details": "FAX1 likely implies a fax line. Normalized assuming US country code and standard keypad mapping for FAX1."
  }
]
```

Do not include any text or explanations outside of the JSON array. Your response must start with `[` and end with `]`.

Input Text:
{input_text}